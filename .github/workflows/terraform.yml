name: Terraform Multi-Cloud

on:
  workflow_dispatch:
    inputs:
      cloud:
        description: "Choose cloud provider"
        required: true
        default: "digitalocean"
        type: choice
        options:
          - digitalocean
          - azure
      action:
        description: "Terraform action"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/bootstrap-${{ github.event.inputs.cloud }}

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # -------------------------
      # DigitalOcean bootstrap
      # -------------------------
      - name: Set DO ENV Vars
        if: ${{ github.event.inputs.cloud == 'digitalocean' }}
        run: |
          echo "TF_VAR_digitalocean_token=${{ secrets.DIGITALOCEAN_TOKEN }}" >> $GITHUB_ENV
          echo "TF_VAR_spaces_access_key=${{ secrets.DO_SPACES_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_spaces_secret_key=${{ secrets.DO_SPACES_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_spaces_bucket_name=do-tfstate-${{ github.run_id }}" >> $GITHUB_ENV
          echo "TF_VAR_region=nyc3" >> $GITHUB_ENV

      - name: Terraform Init (DO Bootstrap)
        if: ${{ github.event.inputs.cloud == 'digitalocean' }}
        run: terraform init -input=false

      - name: Terraform Apply (DO Bootstrap)
        if: ${{ github.event.inputs.cloud == 'digitalocean' }}
        run: terraform apply -auto-approve -input=false

      - name: Save DO Bootstrap Outputs
        if: ${{ github.event.inputs.cloud == 'digitalocean' }}
        run: |
          terraform output -raw bucket_name > $GITHUB_WORKSPACE/do-bucket.txt
          terraform output -raw region > $GITHUB_WORKSPACE/do-region.txt

      - name: Upload DO Bootstrap Outputs
        if: ${{ github.event.inputs.cloud == 'digitalocean' }}
        uses: actions/upload-artifact@v4
        with:
          name: do-bootstrap-outputs
          path: |
            do-bucket.txt
            do-region.txt
          retention-days: 1

      # -------------------------
      # Azure bootstrap
      # -------------------------
      - name: Azure ENV
        if: ${{ github.event.inputs.cloud == 'azure' }}
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV

      - name: Terraform Init (Azure Bootstrap)
        if: ${{ github.event.inputs.cloud == 'azure' }}
        run: terraform init -input=false

      - name: Terraform Apply (Azure Bootstrap)
        if: ${{ github.event.inputs.cloud == 'azure' }}
        run: terraform apply -auto-approve -input=false

      - name: Save Azure Bootstrap Outputs
        if: ${{ github.event.inputs.cloud == 'azure' }}
        run: |
          terraform output -raw resource_group_name > $GITHUB_WORKSPACE/azure-rg.txt
          terraform output -raw storage_account_name > $GITHUB_WORKSPACE/azure-sa.txt
          terraform output -raw container_name > $GITHUB_WORKSPACE/azure-container.txt

      - name: Upload Azure Bootstrap Outputs
        if: ${{ github.event.inputs.cloud == 'azure' }}
        uses: actions/upload-artifact@v4
        with:
          name: azure-bootstrap-outputs
          path: |
            azure-rg.txt
            azure-sa.txt
            azure-container.txt
          retention-days: 1

  terraform:
    needs: bootstrap
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/${{ github.event.inputs.cloud }}

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # -------------------------
      # DigitalOcean cluster
      # -------------------------
      - name: Download DO Bootstrap Outputs
        if: ${{ github.event.inputs.cloud == 'digitalocean' }}
        uses: actions/download-artifact@v4
        with:
          name: do-bootstrap-outputs
          path: ./bootstrap-outputs

      - name: DO ENV
        if: ${{ github.event.inputs.cloud == 'digitalocean' }}
        run: echo "DIGITALOCEAN_TOKEN=${{ secrets.DIGITALOCEAN_TOKEN }}" >> $GITHUB_ENV

      - name: Terraform Init (DO Cluster)
        if: ${{ github.event.inputs.cloud == 'digitalocean' }}
        run: |
          terraform init -input=false \
            -backend-config="bucket=$(cat ./bootstrap-outputs/do-bucket.txt)" \
            -backend-config="key=doks/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="endpoints.s3=https://$(cat ./bootstrap-outputs/do-region.txt).digitaloceanspaces.com" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_metadata_api_check=true" \
            -backend-config="skip_region_validation=true"

      # -------------------------
      # Azure cluster
      # -------------------------
      - name: Download Azure Bootstrap Outputs
        if: ${{ github.event.inputs.cloud == 'azure' }}
        uses: actions/download-artifact@v4
        with:
          name: azure-bootstrap-outputs
          path: ./bootstrap-outputs

      - name: Azure ENV
        if: ${{ github.event.inputs.cloud == 'azure' }}
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV

      - name: Terraform Init (Azure Cluster)
        if: ${{ github.event.inputs.cloud == 'azure' }}
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=$(cat ./bootstrap-outputs/azure-rg.txt)" \
            -backend-config="storage_account_name=$(cat ./bootstrap-outputs/azure-sa.txt)" \
            -backend-config="container_name=$(cat ./bootstrap-outputs/azure-container.txt)" \
            -backend-config="key=aks/terraform.tfstate"

      # -------------------------
      # Plan / Apply / Destroy
      # -------------------------
      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -input=false

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve -input=false

      # -------------------------
      # Upload kubeconfig
      # -------------------------
      - name: Upload kubeconfig artifact
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig-${{ github.event.inputs.cloud }}
          path: ./terraform/${{ github.event.inputs.cloud }}/kubeconfig
