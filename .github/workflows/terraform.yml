name: terraform

on:
  workflow_dispatch:
    inputs:
      provider:
        description: 'cloud provider to deploy (digitalocean | azure)'
        required: true
        default: digitalocean

permissions:
  contents: read
  actions: write
  id-token: write

env:
  TF_VERSION: "1.6.9"
  WORKDIR: terraform

jobs:
  bootstrap:
    name: Bootstrap backend (create storage)
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-artifact.outputs.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Choose provider
        id: set-artifact
        run: |
          if [ "${{ github.event.inputs.provider }}" = "azure" ]; then
            echo "name=azure-bootstrap-outputs" >> $GITHUB_OUTPUT
            echo "provider=azure" >> $GITHUB_OUTPUT
          else
            echo "name=do-bootstrap-outputs" >> $GITHUB_OUTPUT
            echo "provider=digitalocean" >> $GITHUB_OUTPUT
          fi

      # DigitalOcean bootstrap
      - name: Bootstrap: DigitalOcean - init & apply
        if: ${{ steps.set-artifact.outputs.provider == 'digitalocean' }}
        env:
          TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_spaces_access_key: ${{ secrets.DO_SPACES_KEY }}
          TF_VAR_spaces_secret_key: ${{ secrets.DO_SPACES_SECRET }}
          TF_VAR_spaces_bucket_name: ${{ secrets.DO_SPACES_BUCKET_NAME }}
          TF_VAR_region: ${{ secrets.DO_REGION }}
        run: |
          # fallback region to nyc3 if secret wasn't set
          : "${TF_VAR_region:=nyc3}"
          cd ${{ env.WORKDIR }}/bootstrap-digitalocean
          terraform init -input=false
          terraform apply -auto-approve -input=false
          mkdir -p ./outputs
          terraform output -raw bucket_name > ./outputs/do-bucket.txt || true
          terraform output -raw region > ./outputs/do-region.txt || true
          ls -la ./outputs

      # Azure bootstrap
      - name: Bootstrap: Azure - init & apply
        if: ${{ steps.set-artifact.outputs.provider == 'azure' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd ${{ env.WORKDIR }}/bootstrap-azure
          terraform init -input=false
          terraform apply -auto-approve -input=false
          mkdir -p ./outputs
          terraform output -raw resource_group_name > ./outputs/rg-name.txt || true
          terraform output -raw storage_account_name > ./outputs/storage-account.txt || true
          terraform output -raw container_name > ./outputs/container-name.txt || true
          ls -la ./outputs

      - name: Upload bootstrap outputs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact.outputs.name }}
          path: |
            terraform/bootstrap-digitalocean/outputs/**
            terraform/bootstrap-azure/outputs/**

  cluster:
    name: Create cluster
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download artifact (bootstrap outputs)
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.bootstrap.outputs.artifact-name }}
          path: ./bootstrap-outputs

      # DigitalOcean cluster job
      - name: Cluster: DigitalOcean - init & apply
        if: ${{ needs.bootstrap.outputs.artifact-name == 'do-bootstrap-outputs' }}
        env:
          TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_spaces_access_key: ${{ secrets.DO_SPACES_KEY }}
          TF_VAR_spaces_secret_key: ${{ secrets.DO_SPACES_SECRET }}
        run: |
          set -eux
          BUCKET=$(cat ./bootstrap-outputs/do-bucket.txt)
          DO_REGION=$(cat ./bootstrap-outputs/do-region.txt || echo "nyc3")
          cd ${{ env.WORKDIR }}/digitalocean
          terraform init -input=false \
            -backend-config="bucket=${BUCKET}" \
            -backend-config="key=doks/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="endpoints.s3=https://${DO_REGION}.digitaloceanspaces.com" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_metadata_api_check=true" \
            -backend-config="skip_region_validation=true"
          terraform apply -auto-approve -input=false
          mkdir -p ./outputs
          terraform output -raw kubeconfig_path > ./outputs/kubeconfig-path.txt || true
          terraform output -json kubeconfig  > ./outputs/kubeconfig.json || true
          ls -la ./outputs

      # Azure cluster job
      - name: Cluster: Azure - init & apply
        if: ${{ needs.bootstrap.outputs.artifact-name == 'azure-bootstrap-outputs' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          set -eux
          RG=$(cat ./bootstrap-outputs/rg-name.txt)
          STORAGE_ACCOUNT=$(cat ./bootstrap-outputs/storage-account.txt)
          CONTAINER=$(cat ./bootstrap-outputs/container-name.txt)
          cd ${{ env.WORKDIR }}/azure
          terraform init -input=false \
            -backend-config="resource_group_name=${RG}" \
            -backend-config="storage_account_name=${STORAGE_ACCOUNT}" \
            -backend-config="container_name=${CONTAINER}" \
            -backend-config="key=aks/terraform.tfstate"
          terraform apply -auto-approve -input=false
          mkdir -p ./outputs
          terraform output -raw kubeconfig_path > ./outputs/kubeconfig-path.txt || true
          terraform output -json kubeconfig  > ./outputs/kubeconfig.json || true
          ls -la ./outputs

      - name: Upload k
